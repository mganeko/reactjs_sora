{"version":3,"sources":["video.js","index.js"],"names":["Video","props","elementRef","useRef","useEffect","stream","volumeValue","volume","current","srcObject","console","log","id","controls","className","ref","width","height","autoPlay","muted","playsInline","roomId","roomFromUrl","search","window","location","results","RegExp","exec","room","getRoomFromUrl","signalingKey","keyFromUrl","key","getKeyFromUrl","sora","Sora","connection","App","localStream","state","playing","connected","videoCodec","remoteStreams","startVideo","bind","stopVideo","connect","disconnect","handleRoomChange","handleKeyChange","handleCodecChange","addRemoteStream","removeRemoteStream","removeAllRemoteStream","publisher","this","e","preventDefault","warn","navigator","mediaDevices","getUserMedia","video","audio","then","setState","catch","err","error","getTracks","forEach","track","stop","metadata","signaling_key","options","multistream","videoCodecType","videoBitRate","app","on","event","handleDisconnect","target","value","clonedStreams","Object","assign","remoteVideos","keys","push","onChange","disabled","onClick","type","size","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b5fe270.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport './video.css';\n\n// ------ Video Component ------\n\nfunction Video(props) {\n  const elementRef = useRef(null);\n\n  useEffect(() => {\n    const stream = props.stream;\n    let volumeValue = 0;\n    if (props.volume) {\n      volumeValue = props.volume;\n    }\n\n    if (elementRef.current) {\n      if (elementRef.current.srcObject === stream) {\n        console.log('useEffect() same stream, so skip:', stream);\n      }\n      else {\n        elementRef.current.srcObject = stream;\n        console.log('useEffect() set stream:', stream);\n      }\n\n      elementRef.current.volume = volumeValue;\n    }\n    else {\n      console.log('useEffect() ref.current NULL');\n    }\n  });\n\n  console.log('Video rendering, id=%s', props.id);\n  const controls = props.controls;\n  if (controls) {\n    return (\n      <video className=\"video_with_border\" ref={elementRef} id={props.id} width={props.width} height={props.height} autoPlay muted playsInline controls ></video>\n    );\n  }\n  else {\n    return (\n      <video className=\"video_with_border\" ref={elementRef} id={props.id} width={props.width} height={props.height} autoPlay muted playsInline ></video>\n    );\n  }\n}\n\nexport default Video;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Video from './video'; // video.js\nimport Sora from 'sora-js-sdk';\n\nimport './index.css';\n\n// ----\n// TODO\n//  - video not shown, ref is Null on addstream\n//    - maybe useEffect is usefull\n// ----\n\n// ------ params -----\nconst signalingUrl = 'wss://sora-labo.shiguredo.jp/signaling';\nlet roomId = 'mm-react-sora-test';\nconst roomFromUrl = getRoomFromUrl();\nif (roomFromUrl && (roomFromUrl !== '')) {\n  roomId = roomFromUrl;\n}\nlet signalingKey = '';\nconst keyFromUrl = getKeyFromUrl();\nif (keyFromUrl && (keyFromUrl !== '')) {\n  signalingKey = keyFromUrl;\n}\n\n// ---- URL ----\nfunction getRoomFromUrl() {\n  const search = window.location.search;\n  const re = new RegExp('room=([^&=]+)');\n  const results = re.exec(search);\n  let room = '';\n  if (results) {\n    room = results[1];\n  }\n  return room;\n}\n\nfunction getKeyFromUrl() {\n  const search = window.location.search;\n  const re = new RegExp('key=([^&=]+)');\n  const results = re.exec(search);\n  let key = null;\n  if (results) {\n    key = results[1];\n  }\n  return key;\n}\n\n// --- Sora -----\nconst debug = false; //true;\nconst sora = Sora.connection(signalingUrl, debug);\n\n// ------ App class ------\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.localStream = null;\n    this.state = {\n      playing: false,\n      connected: false,\n      //gotRemoteStream: false,\n      roomId: roomId,\n      signalingKey: signalingKey,\n      videoCodec: 'VP9',\n      remoteStreams: {},\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    this.startVideo = this.startVideo.bind(this);\n    this.stopVideo = this.stopVideo.bind(this);\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.handleRoomChange = this.handleRoomChange.bind(this);\n    this.handleKeyChange = this.handleKeyChange.bind(this);\n    this.handleCodecChange = this.handleCodecChange.bind(this);\n    this.addRemoteStream = this.addRemoteStream.bind(this);\n    this.removeRemoteStream = this.removeRemoteStream.bind(this);\n    this.removeAllRemoteStream = this.removeAllRemoteStream.bind(this);\n\n    // -- Sora connection --\n    this.publisher = null;\n    //this.remoteStream1 = null;\n  }\n\n  componentDidMount() {\n    console.log('App DidMound()');\n  }\n\n  componentWillUnmount() {\n    console.log('App WillUnmount()');\n    if (this.localStream) {\n      this.stopVideo();\n    }\n  }\n\n  // -----------\n  startVideo(e) {\n    e.preventDefault();\n    console.log('start Video');\n    if (this.localStream) {\n      console.warn('localVideo ALREADY started');\n      return;\n    }\n\n    const constraints = { video: true, audio: true };\n    navigator.mediaDevices.getUserMedia(constraints)\n      .then(stream => {\n        this.localStream = stream;\n        this.setState({ playing: true });\n      })\n      .catch(err => console.error('media ERROR:', err));\n  }\n\n  stopVideo(e) {\n    e.preventDefault();\n    console.log('stop Video');\n    if (this.localStream) {\n      this.localStream.getTracks().forEach(track => track.stop());\n      this.localStream = null;\n      this.setState({ playing: false });\n    }\n  }\n\n  // const metadata = {\n  //   signaling_key: \"jGTYhHBYhIF0IvzTTvPub0aO8qsmshksqACOCou2GrcOSNTa\"\n  // };\n  // const options = {\n  //   multistream: true\n  // };\n  // const publisher = sora.publisher(channelId, metadata, options);\n\n  // -----------------\n  connect(e) {\n    e.preventDefault();\n    console.log('connect');\n    if (this.publisher) {\n      console.warn('ALREADY connected');\n      return;\n    }\n\n    const metadata = {\n      signaling_key: this.state.signalingKey\n    };\n    const options = {\n      audio: true,\n      multistream: true,\n      video: true,\n      videoCodecType: this.state.videoCodec,\n      videoBitRate: 1000,\n    };\n    const app = this;\n    //console.log('app:', app);\n\n    console.log('connecting roomId=%s codec=%s key=%s', this.state.roomId, options.videoCodecType, this.state.signalingKey);\n    this.publisher = sora.publisher(this.state.roomId, metadata, options);\n    this.publisher.on('addstream', function (event) {\n      console.log('addstream id=%s', event.stream.id);\n\n      // --- test for 1 stream --\n      // app.remoteStream1 = event.stream;\n      // app.setState({ gotRemoteStream: true });\n\n      // --- for multi stream ---\n      const id = 'remote_' + event.stream.id;\n      app.addRemoteStream(id, event.stream);\n\n      // var remoteVideo = document.createElement('video');\n      // remoteVideo.id = 'publisher-remote-video-' + event.stream.id;\n      // remoteVideo.autoplay = true;\n      // remoteVideo.srcObject = event.stream;\n\n      // var remoteVideos = document.querySelector('#remote-videos');\n      // remoteVideos.appendChild(remoteVideo);\n    });\n\n    this.publisher.on('removestream', function (event) {\n      console.log('removestream id=%s', event.stream.id);\n\n      // --- test for 1 stream --\n      // app.remoteStream1 = null;\n      // app.setState({ gotRemoteStream: false });\n\n      // --- for multi stream ---\n      const id = 'remote_' + event.stream.id;\n      app.removeRemoteStream(id);\n\n\n      // var remoteVideo = document.querySelector('#publisher-remotevideo-' + event.stream.id);\n      // var remoteVideos = document.querySelector('#remote-videos');\n      // remoteVideos.removeChild(remoteVideo);\n    });\n\n    this.publisher.on('disconnect', e => {\n      console.log('sora disconnected:', e);\n      this.handleDisconnect()\n    });\n\n    this.publisher.connect(this.localStream)\n      .then(() => {\n        console.log('sora connected');\n        app.setState({ connected: true });\n      })\n      .catch(err => {\n        console.error('sora connect ERROR:', err);\n      });\n  }\n\n  disconnect(e) {\n    e.preventDefault();\n    console.log('disconnect');\n    this.handleDisconnect();\n  }\n\n  handleDisconnect() {\n    if (this.publisher) {\n      this.publisher.disconnect();\n      // localStream will be stoped\n      this.publisher = null;\n      this.localStream = null;\n      this.setState({ playing: false });\n    }\n\n    this.removeAllRemoteStream();\n\n    //this.remoteStream1 = null;\n    //this.setState({ connected: false, gotRemoteStream: false });\n    this.setState({ connected: false });\n  }\n\n  handleRoomChange(e) {\n    this.setState({ roomId: e.target.value });\n  }\n\n  handleKeyChange(e) {\n    this.setState({ signalingKey: e.target.value });\n  }\n\n  handleCodecChange(e) {\n    this.setState({ videoCodec: e.target.value });\n  }\n\n  addRemoteStream(id, stream) {\n    const clonedStreams = Object.assign({}, this.state.remoteStreams);\n    clonedStreams[id] = stream;\n    this.setState({ remoteStreams: clonedStreams });\n  }\n\n  removeRemoteStream(id, stream) {\n    const clonedStreams = Object.assign({}, this.state.remoteStreams);\n    delete clonedStreams[id];\n    this.setState({ remoteStreams: clonedStreams });\n  }\n\n  removeAllRemoteStream() {\n    const newStreams = {};\n    this.setState({ remoteStreams: newStreams });\n  }\n\n  // -----------------\n  render() {\n    console.log('App render()');\n\n    const remoteVideos = [];\n    Object.keys(this.state.remoteStreams).forEach(function (key) {\n      const stream = this[key]; // this は this.state.remoteStream\n      console.log('key=id=%s, stream.id=%s', key, stream.id);\n      remoteVideos.push(\n        <Video id={key} key={key} width={\"320px\"} height={\"240px\"} volume={0.5} controls={true} stream={stream}>\n        </Video>\n      );\n    }, this.state.remoteStreams);\n\n    return (\n      <div className=\"App\" >\n        React - Sora Labo example<br />\n        Video Codec:\n        <select value={this.state.videoCodec} onChange={this.handleCodecChange} disabled={this.state.connected} >\n          <option value=\"VP8\">VP8</option>\n          <option value=\"VP9\">VP9</option>\n          <option value=\"H264\">H264</option>\n          <option value=\"H265\">H265</option>\n        </select>\n        &nbsp;\n        <button onClick={this.startVideo} disabled={this.state.playing || this.state.connected}> Start Video</button >\n        <button onClick={this.stopVideo} disabled={!this.state.playing || this.state.connected}>Stop Video</button>\n        <br />\n        SignalingKey: <input id=\"signaling_key\" type=\"text\" size=\"32\" value={this.state.signalingKey} onChange={this.handleKeyChange} disabled={this.state.connected}></input>\n        <br />\n        Room: <input id=\"room_id\" type=\"text\" value={this.state.roomId} onChange={this.handleRoomChange} disabled={this.state.connected}></input>\n        <button onClick={this.connect} disabled={this.state.connected || !this.state.playing}> Connect</button >\n        <button onClick={this.disconnect} disabled={!this.state.connected}>Disconnect</button>\n        <br />\n        <div className=\"VideoContainer\">\n          <Video id={\"local_video\"} width={\"160px\"} height={\"120px\"} stream={this.localStream}>\n          </Video>\n          <div className=\"RemoteContainer\">\n            {remoteVideos}\n            { /*\n            <Video id={\"remote_video\"} width={\"320px\"} height={\"240px\"} volume={0.5} controls={true} stream={this.remoteStream1}>\n            </Video>\n            */ }\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\n// ====================== ReactDOM rendering ====================\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}